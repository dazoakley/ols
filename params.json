{"name":"OLS","body":"# OLS\r\n\r\nOLS provides a simple interface to the EBI's Ontology Lookup Service (http://www.ebi.ac.uk/ontology-lookup/). It provides an easy lookup of ontology terms and automagically builds up ontology graphs.\r\n\r\n## Install\r\n\r\n```bash\r\ngem install ols\r\n```\r\n\r\n## Basic Usage\r\n\r\nInclude the module in your code:\r\n\r\n```ruby\r\nrequire 'rubygems'\r\nrequire 'ols'\r\n```\r\n\r\nThen, to lookup an ontology term:\r\n\r\n```ruby\r\nont = OLS.find_by_id('EMAP:3018')\r\n```\r\n\r\nThis will create a simple tree object for the EMAP term EMAP:3018\r\n\r\n```ruby\r\nont.term_id             # => \"EMAP:3018\"\r\nont.term_name           # => \"TS18,nose\"\r\n```\r\n\r\nFind out about your ontology term\r\n\r\n```ruby\r\nont.is_root?            # => false\r\nont.is_leaf?            # => false\r\nont.to_s                # => \"EMAP:3018 - TS18,nose\"\r\n```\r\n\r\nThe graph for the term is built up (parents) and down (children) as it is requested:\r\n\r\n```ruby\r\nont.parents             # => Array of all parent terms objects\r\nont.children            # => Array of all direct child term objects\r\n```\r\n\r\nAlternatively, if you want to force load the graph (around this term):\r\n\r\n```ruby\r\nont.focus_graph!        # => Will load all parents and children into the graph\r\nont.size                # => 19\r\n```\r\n\r\nFind out more about your graph:\r\n\r\n```ruby\r\nont.root                # => Gives you the root node - in this case: \"EMAP:0\"\r\nont.all_parent_ids      # => An array of all parent ontology terms\r\nont.all_parent_names    # => An array of all parent ontology term names\r\nont.all_child_ids       # => An array of all child ontology terms\r\nont.all_child_names     # => An array of all child ontology term names\r\n```\r\n\r\nVisualise your graph (useful for exploring):\r\n\r\n```ruby\r\nont.root.print_graph\r\n\r\n# Gives the following:\r\n#\r\n# * EMAP:0\r\n#     |---+ EMAP:2636\r\n#         |---+ EMAP:2822\r\n#             |---+ EMAP:2987\r\n#                 |---+ EMAP:3018\r\n#                     |---+ EMAP:3022\r\n#                         |---+ EMAP:3023\r\n#                             |---+ EMAP:3024\r\n#                                 |---> EMAP:3025\r\n#                                 |---> EMAP:3026\r\n#                             |---+ EMAP:3027\r\n#                                 |---> EMAP:3029\r\n#                                 |---> EMAP:3028\r\n#                             |---+ EMAP:3030\r\n#                                 |---> EMAP:3031\r\n#                                 |---> EMAP:3032\r\n#                     |---> EMAP:3019\r\n#                     |---+ EMAP:3020\r\n#                         |---> EMAP:3021\r\n#\r\n```\r\n\r\nMore documentation can be found on the [OLS module and OLS::Term rdoc pages](http://rdoc.info/gems/ols/frames).\r\n\r\n## Advanced Usage\r\n\r\nMore to come...\r\n\r\n## Caching\r\n\r\nIf you regularly hit up one or more ontology with lots of queries it might be in\r\nyour interest to store a local on-disk copy of the entire ontology graph.  This\r\nwill protect you against network problems and will stop you hitting OLS with many\r\nrepeated service calls.\r\n\r\nThe OLS gem has a basic caching layer built into it that allows you to store the\r\nentire graph for your most used ontologies on disk.  To setup/invoke the cache, do\r\nthe following:\r\n\r\n```ruby\r\nOLS.setup_cache({ :directory => '/tmp/ols_cache' })\r\n```\r\n\r\nThis will create a cache directory (/tmp/ols_cache) if it does not exist, or read in\r\nconfiguration files etc if it is an already existing OLS cache directory. If you do not\r\npass in a configuration hash it will use the current working directory by default.\r\n\r\nNow, to add an ontology to the cache, you do the following:\r\n\r\n```ruby\r\nOLS.add_ontology_to_cache(\"EMAP\")\r\n```\r\n\r\nThis will add the entire EMAP ontology graph to the cache (this will take a while) - now\r\nall calls for EMAP terms will go via the cache, all other queries will still call the OLS web\r\nservices.  (There is no dynamic cache build-up over time).\r\n\r\nTo remove an ontology graph from the cache:\r\n\r\n```ruby\r\nOLS.remove_ontology_from_cache(\"EMAP\")\r\n```\r\n\r\nDifferent cache back-ends and other features will be built into future releases.\r\n\r\n## Meta\r\n\r\nWritten by Darren Oakley (daz dot oakley at gmail dot com)\r\n\r\nhttp://dazoakley.github.com/ols\r\n\r\nhttp://github.com/dazoakley/ols\r\n\r\nhttp://rdoc.info/gems/ols/frames\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011 Darren Oakley\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tagline":"Ruby client for the EBI's Ontology Lookup Service","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}